// <auto-generated />
using System;
using System.Collections.Generic;
using AirQuality.OpenAQ.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirQuality.OpenAQ.Migrations
{
    [DbContext(typeof(OpenAQDbContext))]
    [Migration("20250924123615_sensor-changed")]
    partial class sensorchanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.LocationDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<double>>("Bounds")
                        .HasColumnType("double precision[]")
                        .HasAnnotation("Relational:JsonPropertyName", "bounds");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "distance");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isMobile");

                    b.Property<bool>("IsMonitor")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isMonitor");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "lastUpdate");

                    b.Property<string>("Locality")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "locality");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "timezone");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.LocationSensorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParameterId");

                    b.ToTable("LocationSensorDTO");

                    b.HasAnnotation("Relational:JsonPropertyName", "sensors");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.ParameterDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "displayName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "units");

                    b.HasKey("Id");

                    b.ToTable("Parameters");

                    b.HasAnnotation("Relational:JsonPropertyName", "parameter");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.SensorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("SensorDTO");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.LocationDTO", b =>
                {
                    b.OwnsOne("AirQuality.OpenAQ.Contracts.CountryDTO", "Country", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "code");

                            b1.Property<DateTime?>("DatetimeFirst")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "datetimeFirst");

                            b1.Property<DateTime?>("DatetimeLast")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "datetimeLast");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "country");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.CoordinatesDTO", "Coordinates", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "longitude");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "coordinates");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeFirst", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<DateTime?>("Local")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "local");

                            b1.Property<DateTime?>("Utc")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "utc");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "datetimeFirst");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeLast", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<DateTime?>("Local")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "local");

                            b1.Property<DateTime?>("Utc")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "utc");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "datetimeLast");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.IdNameDTO", "Owner", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "owner");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.IdNameDTO", "Provider", b1 =>
                        {
                            b1.Property<int>("LocationDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("LocationDTOId");

                            b1.ToTable("Locations");

                            b1.HasAnnotation("Relational:JsonPropertyName", "provider");

                            b1.WithOwner()
                                .HasForeignKey("LocationDTOId");
                        });

                    b.OwnsMany("AirQuality.OpenAQ.Contracts.LicenceDTO", "Licenses", b1 =>
                        {
                            b1.Property<int>("LocationId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("LicenseId")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("DateFrom")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "dateFrom");

                            b1.Property<DateTime?>("DateTo")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "dateTo");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("LicenseName")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("LocationId", "Id");

                            b1.ToTable("Locations_Licenses", (string)null);

                            b1.HasAnnotation("Relational:JsonPropertyName", "licenses");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");

                            b1.OwnsOne("AirQuality.OpenAQ.Contracts.AttributionDTO", "Attribution", b2 =>
                                {
                                    b2.Property<int>("LicenceDTOLocationId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("LicenceDTOId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer")
                                        .HasColumnName("AttributionId");

                                    b2.Property<string>("Name")
                                        .HasColumnType("text")
                                        .HasColumnName("AttributionName")
                                        .HasAnnotation("Relational:JsonPropertyName", "name");

                                    b2.Property<string>("Url")
                                        .HasColumnType("text")
                                        .HasColumnName("AttributionUrl")
                                        .HasAnnotation("Relational:JsonPropertyName", "url");

                                    b2.HasKey("LicenceDTOLocationId", "LicenceDTOId");

                                    b2.ToTable("Locations_Licenses");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "attribution");

                                    b2.WithOwner()
                                        .HasForeignKey("LicenceDTOLocationId", "LicenceDTOId");
                                });

                            b1.Navigation("Attribution");
                        });

                    b.OwnsMany("AirQuality.OpenAQ.Contracts.IdNameDTO", "Instruments", b1 =>
                        {
                            b1.Property<int>("LocationId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("InstrumentId")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("InstrumentName")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("LocationId", "Id");

                            b1.ToTable("Locations_Instruments", (string)null);

                            b1.HasAnnotation("Relational:JsonPropertyName", "instruments");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Coordinates");

                    b.Navigation("Country");

                    b.Navigation("DatetimeFirst");

                    b.Navigation("DatetimeLast");

                    b.Navigation("Instruments");

                    b.Navigation("Licenses");

                    b.Navigation("Owner");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.LocationSensorDTO", b =>
                {
                    b.HasOne("AirQuality.OpenAQ.Contracts.LocationDTO", null)
                        .WithMany("Sensors")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AirQuality.OpenAQ.Contracts.ParameterDTO", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.SensorDTO", b =>
                {
                    b.HasOne("AirQuality.OpenAQ.Contracts.ParameterDTO", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId");

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.CoverageDTO", "Coverage", b1 =>
                        {
                            b1.Property<int>("SensorDTOId")
                                .HasColumnType("integer");

                            b1.Property<int?>("ExpectedCount")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "expectedCount");

                            b1.Property<string>("ExpectedInterval")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "expectedInterval");

                            b1.Property<int?>("ObservedCount")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "observedCount");

                            b1.Property<string>("ObservedInterval")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "observedInterval");

                            b1.Property<double?>("PercentComplete")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "percentComplete");

                            b1.Property<double?>("PercentCoverage")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "percentCoverage");

                            b1.HasKey("SensorDTOId");

                            b1.ToTable("SensorDTO");

                            b1.HasAnnotation("Relational:JsonPropertyName", "coverage");

                            b1.WithOwner()
                                .HasForeignKey("SensorDTOId");

                            b1.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeFrom", b2 =>
                                {
                                    b2.Property<int>("CoverageDTOSensorDTOId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "id");

                                    b2.Property<DateTime?>("Local")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "local");

                                    b2.Property<DateTime?>("Utc")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "utc");

                                    b2.HasKey("CoverageDTOSensorDTOId");

                                    b2.ToTable("SensorDTO");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "datetimeFrom");

                                    b2.WithOwner()
                                        .HasForeignKey("CoverageDTOSensorDTOId");
                                });

                            b1.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeTo", b2 =>
                                {
                                    b2.Property<int>("CoverageDTOSensorDTOId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "id");

                                    b2.Property<DateTime?>("Local")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "local");

                                    b2.Property<DateTime?>("Utc")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "utc");

                                    b2.HasKey("CoverageDTOSensorDTOId");

                                    b2.ToTable("SensorDTO");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "datetimeTo");

                                    b2.WithOwner()
                                        .HasForeignKey("CoverageDTOSensorDTOId");
                                });

                            b1.Navigation("DatetimeFrom")
                                .IsRequired();

                            b1.Navigation("DatetimeTo")
                                .IsRequired();
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.LatestDTO", "Latest", b1 =>
                        {
                            b1.Property<int>("SensorDTOId")
                                .HasColumnType("integer");

                            b1.Property<bool>("HasValueMarker")
                                .HasColumnType("boolean");

                            b1.Property<double?>("Value")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "value");

                            b1.HasKey("SensorDTOId");

                            b1.ToTable("SensorDTO");

                            b1.HasAnnotation("Relational:JsonPropertyName", "latest");

                            b1.WithOwner()
                                .HasForeignKey("SensorDTOId");

                            b1.OwnsOne("AirQuality.OpenAQ.Contracts.CoordinatesDTO", "Coordinates", b2 =>
                                {
                                    b2.Property<int>("LatestDTOSensorDTOId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision")
                                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision")
                                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                                    b2.HasKey("LatestDTOSensorDTOId");

                                    b2.ToTable("SensorDTO");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "coordinates");

                                    b2.WithOwner()
                                        .HasForeignKey("LatestDTOSensorDTOId");
                                });

                            b1.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "Datetime", b2 =>
                                {
                                    b2.Property<int>("LatestDTOSensorDTOId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "id");

                                    b2.Property<DateTime?>("Local")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "local");

                                    b2.Property<DateTime?>("Utc")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "utc");

                                    b2.HasKey("LatestDTOSensorDTOId");

                                    b2.ToTable("SensorDTO");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "datetime");

                                    b2.WithOwner()
                                        .HasForeignKey("LatestDTOSensorDTOId");
                                });

                            b1.Navigation("Coordinates");

                            b1.Navigation("Datetime");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeFirst", b1 =>
                        {
                            b1.Property<int>("SensorDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<DateTime?>("Local")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "local");

                            b1.Property<DateTime?>("Utc")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "utc");

                            b1.HasKey("SensorDTOId");

                            b1.ToTable("SensorDTO");

                            b1.HasAnnotation("Relational:JsonPropertyName", "datetimeFirst");

                            b1.WithOwner()
                                .HasForeignKey("SensorDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.DateDTO", "DatetimeLast", b1 =>
                        {
                            b1.Property<int>("SensorDTOId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.Property<DateTime?>("Local")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "local");

                            b1.Property<DateTime?>("Utc")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "utc");

                            b1.HasKey("SensorDTOId");

                            b1.ToTable("SensorDTO");

                            b1.HasAnnotation("Relational:JsonPropertyName", "datetimeLast");

                            b1.WithOwner()
                                .HasForeignKey("SensorDTOId");
                        });

                    b.OwnsOne("AirQuality.OpenAQ.Contracts.SummaryDTO", "Summary", b1 =>
                        {
                            b1.Property<int>("SensorDTOId")
                                .HasColumnType("integer");

                            b1.Property<double?>("Avg")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "avg");

                            b1.Property<double?>("Max")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "max");

                            b1.Property<double?>("Median")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "median");

                            b1.Property<double?>("Min")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "min");

                            b1.Property<double?>("Q02")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "q02");

                            b1.Property<double?>("Q25")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "q25");

                            b1.Property<double?>("Q75")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "q75");

                            b1.Property<double?>("Q98")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "q98");

                            b1.Property<double?>("Sd")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "sd");

                            b1.HasKey("SensorDTOId");

                            b1.ToTable("SensorDTO");

                            b1.HasAnnotation("Relational:JsonPropertyName", "summary");

                            b1.WithOwner()
                                .HasForeignKey("SensorDTOId");
                        });

                    b.Navigation("Coverage");

                    b.Navigation("DatetimeFirst");

                    b.Navigation("DatetimeLast");

                    b.Navigation("Latest");

                    b.Navigation("Parameter");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("AirQuality.OpenAQ.Contracts.LocationDTO", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
